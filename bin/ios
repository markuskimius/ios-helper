#!/bin/bash

##############################################################################
# ios: Script to help build a UNIX project for iOS.
# https://github.com/markuskimius/ios
#
# Copyright (c)2021 Mark K. Kim
# Released under the Apache license 2.0
# https://github.com/markuskimius/ios/blob/master/LICENSE
##############################################################################

function usage() {
    cat <<EOF
Script to help build a UNIX project for iOS.

Usage: ${SCRIPTNAME} [OPTIONS] ACTION

OPTIONS:
  -s                    Build it for the iOS Simulator instead of iOS.
  -p PREFIX             Build into PREFIX.  Defaults:
                            \$HOME/ios     (for iOS)
                            \$HOME/ios-sim (for iOS Simulator)

  -d                    Dry run. Do not execute ACTION but print the command
                        that would be executed.

ACTION:
  configure [ARGS]      Run the configure script with appropriate options to
                        build for iOS.  Following arguments are automatically
                        passed:

                            --prefix PREFIX  (from "-p PREFIX" above)
                            --disable-shared
                            --host HOST

  xcodebuild [ARGS]     Run xcodebuild with appropriate options to build for
                        iOS.  Following arguments are automatically passed:

                            -sdk SDK
                            -project  (prefiexed before *.xcodeproj if not set)

  (any other command)   Run the command in the iOS build environment.

ENVIRONMENT VARIABLES:
  ACTION is executed in an environment with these variables set:

        CC      CFLAGS      CPATH
        CXX     CXXFLAGS
        CPP     CPPFLAGS
        LD      LDFLAGS     LIBRARY_PATH
        PATH    PKG_CONFIG_PATH

  To check what values are assigned to them, echo their values in a shell:

        ios bash -c 'echo "\$CFLAGS"'     # Value of CFLAGS in the iOS build environment
        ios -s bash -c 'echo "\$CFLAGS"'  # Value of CFLAGS in the iOS Simulator build environment

EXAMPLES:
  ios -p /usr/ios configure && make && make install    # Build for iOS into /usr/ios
  ios -sp /usr/isim configure && make && make install  # Build for iOS Simulator into /usr/isim

  ios xcodebuild myproject.xcodeproj build             # Build myproject.xcodeproj
  ios xcodebuild myproject.xcodeproj clean             # Clean myproject.xcodeproj

EOF
}


##############################################################################
# PROGRAM BEGINS HERE

SCRIPTNAME=$(basename "${BASH_SOURCE}")
MAC_MINVER=${MAC_MINVER-darwin14.0.0}
MAC_ARCH=${MAC_ARCH-$(uname -m)}
IOS_MINVER=${IOS_MINVER-9.0}
IOS_ARCH=${IOS_ARCH-arm64}
PLATFORM=ios
DRYRUN=0

function main() {
    local OPTIND OPTARG opt
    local action

    # Parse OPTIONS
    while getopts "sp:dh" opt; do
        case "$opt" in
            s)  PLATFORM=sim           ;;
            p)  PREFIX=$OPTARG         ;;
            d)  DRYRUN=1               ;;
            h)  usage && return 0      ;;
            *)  usage 1>&2 && return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    # Validate ACTION
    case "$(basename "$1")" in
        "")         echo "ACTION required" 1>&2
                    usage 1>&2
                    return 1                ;;

        configure)  action=ios-configure    ;;
        xcodebuild) action=ios-xcodebuild   ;;
        *)          action=ios-withenv      ;;
    esac

    case "$1" in
        help)       action=usage            ;;
    esac

    # Execute ACTION
    "$action" "$@"
}


function ios-withenv() {
    (
        setenv && "$@"
    )
}


function ios-configure() {
    local configure=$1 && shift
    local opts=()
    local used=()
    local line

    ! command -v "$configure" >/dev/null && configure=./configure                              # default to ./configure
    ! command -v "$configure" >/dev/null && echo "$configure: No such executable" && return 1  # error if no configure

    while IFS= read -r line; do
        [[ "$line" == *--enable-shared* ]] && [[ " $* " != *\ --enable-shared[=\ ]* ]] && [[ " ${used[*]} " != " --disble-shared " ]] && used+=( --disable-shared ) && opts+=( "--disable-shared"          )
        [[ "$line" == *--prefix*        ]] && [[ " $* " != *\ --prefix[=\ ]*        ]] && [[ " ${used[*]} " != " --prefix "        ]] && used+=( --prefix         ) && opts+=( "--prefix=$(config prefix)" )
        [[ "$line" == *--host*          ]] && [[ " $* " != *\ --host[=\ ]*          ]] && [[ " ${used[*]} " != " --host "          ]] && used+=( --host           ) && opts+=( "--host=$(config host)"     )
    done < <("$configure" --help)

    (
        setenv

        echo "$configure" "${opts[@]}" "$@"
        (( ! DRYRUN )) && "$configure" "${opts[@]}" "$@"
    )
}


function ios-xcodebuild() {
    local xcodebuild=$1 && shift
    local used=()
    local opts=()
    local o

    for o in "$@"; do
        [[ "$o" == -sdk        ]] && used+=( -sdk     )
        [[ "$o" == -project    ]] && used+=( -project )

        # add -project in front of *.xcodeproj if not set
        if [[ -d "$o" ]] && [[ "$(cd "$o" && pwd)" == *.xcodeproj ]] && [[ " ${used[*]} " != " -project " ]]; then
            opts+=( -project )
        fi

        opts+=( "$o" )
    done

    [[ " ${used[*]} " != " -sdk " ]] && opts=( -sdk "$(config sdk)" "${opts[@]}" )  # add -sdk to front if not set

    (
        setenv

        echo "$xcodebuild" "${opts[@]}"
        (( ! DRYRUN )) && "$xcodebuild" "${opts[@]}"
    )
}


function setenv() {
    export CC=$(config clang)
    export LD=$(config clang)
    export CXX=$(config clang)
    export CPP=$(config cpp)
    export CFLAGS=$(config CFLAGS)
    export LDFLAGS=$(config LDFLAGS)
    export CXXFLAGS=$(config CXXFLAGS)
    export CPPFLAGS=$(config CPPFLAGS)

    export PATH="$(config prefix)/bin:$PATH"
    export CPATH="$(config incdir):$(config sdkincdir):$CPATH"
    export LIBRARY_PATH="$(config libdir):$(config sdklibdir):$LIBRARY_PATH"
    export PKG_CONFIG_PATH="$(config prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
}


function config() {
    local what=$1
    local altarch=$IOS_ARCH

    if [[ "$altarch" == "arm64" ]]; then
        altarch=arm
    fi

    case "${PLATFORM},${what}" in
        ios,sdk)      echo iphoneos        ;;
        sim,sdk)      echo iphonesimulator ;;

        ios,prefix)   echo "${PREFIX-${HOME}/ios}"                  ;;
        sim,prefix)   echo "${PREFIX-${HOME}/ios-sim}"              ;;

        ios,host)     echo "${altarch}-ios-${MAC_MINVER}"           ;;
        sim,host)     echo "${MAC_ARCH}-ios-${MAC_MINVER}"          ;;

        *,cpp)        echo $(xcrun --sdk $(config sdk) -f clang) -E ;;
        *,clang)      xcrun --sdk $(config sdk) -f clang            ;;
        *,sysroot)    xcrun --sdk $(config sdk) --show-sdk-path     ;;

        *,incdir)     echo "$(config prefix)/include"               ;;
        *,libdir)     echo "$(config prefix)/lib"                   ;;

        *,sdkincdir)  echo "$(config sysroot)/usr/include"          ;;
        *,sdklibdir)  echo "$(config sysroot)/usr/lib"              ;;

        ios,CFLAGS)   echo "$CFLAGS   -miphoneos-version-min=$IOS_MINVER -arch $IOS_ARCH -isysroot $(config sysroot) -I$(config incdir) -I$(config sdkincdir) -fPIC" ;;
        ios,CXXFLAGS) echo "$CXXFLAGS -miphoneos-version-min=$IOS_MINVER -arch $IOS_ARCH -isysroot $(config sysroot) -I$(config incdir) -I$(config sdkincdir) -fPIC" ;;
        ios,CPPFLAGS) echo "$CPPFLAGS -miphoneos-version-min=$IOS_MINVER -arch $IOS_ARCH -isysroot $(config sysroot) -I$(config incdir) -I$(config sdkincdir) -fPIC" ;;
        ios,LDFLAGS)  echo "$LDFLAGS  -miphoneos-version-min=$IOS_MINVER -arch $IOS_ARCH -isysroot $(config sysroot) -L$(config libdir) -L$(config sdklibdir) $LIBS" ;;

        sim,CFLAGS)   echo "$CFLAGS   -mios-simulator-version-min=$IOS_MINVER -arch $MAC_ARCH -isysroot $(config sysroot) -I$(config incdir) -I$(config sdkincdir) -fPIC" ;;
        sim,CXXFLAGS) echo "$CXXFLAGS -mios-simulator-version-min=$IOS_MINVER -arch $MAC_ARCH -isysroot $(config sysroot) -I$(config incdir) -I$(config sdkincdir) -fPIC" ;;
        sim,CPPFLAGS) echo "$CPPFLAGS -mios-simulator-version-min=$IOS_MINVER -arch $MAC_ARCH -isysroot $(config sysroot) -I$(config incdir) -I$(config sdkincdir) -fPIC" ;;
        sim,LDFLAGS)  echo "$LDFLAGS  -mios-simulator-version-min=$IOS_MINVER -arch $MAC_ARCH -isysroot $(config sysroot) -L$(config libdir) -L$(config sdklibdir) $LIBS" ;;
    esac
}


##############################################################################
# ENTRY POINT

main "$@"

